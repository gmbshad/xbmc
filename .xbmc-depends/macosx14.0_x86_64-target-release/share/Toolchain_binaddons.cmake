set(OS "osx")
set(CMAKE_SYSTEM_PROCESSOR x86_64)
set(CPU "x86_64")
set(PLATFORM "macosx")
set(APP_RENDER_SYSTEM )

set(CMAKE_FIND_ROOT_PATH @CMAKE_FIND_ROOT_PATH@)

# set CORE_SYSTEM_NAME and CMAKE_SYSTEM_NAME (sets CMAKE_CROSSCOMPILING)
if(OS STREQUAL linux)
  set(CMAKE_SYSTEM_NAME Linux)
  set(CORE_SYSTEM_NAME linux)
  set(CORE_PLATFORM_NAME macosx)
  if(NOT APP_RENDER_SYSTEM)
    set(APP_RENDER_SYSTEM gl)
  endif()
elseif(OS STREQUAL android)
  set(CMAKE_SYSTEM_NAME Android)
  set(CORE_SYSTEM_NAME android)
  if(NOT APP_RENDER_SYSTEM)
    set(APP_RENDER_SYSTEM gles)
  endif()
elseif(OS STREQUAL osx)
  set(CMAKE_SYSTEM_NAME Darwin)
  set(CORE_SYSTEM_NAME osx)
  if(NOT APP_RENDER_SYSTEM)
    set(APP_RENDER_SYSTEM gl)
  endif()
elseif(OS STREQUAL darwin_embedded)
  set(CMAKE_SYSTEM_NAME Darwin)
  set(CORE_SYSTEM_NAME darwin_embedded)
  if(PLATFORM STREQUAL appletvos)
    set(CORE_PLATFORM_NAME tvos)
  else()
    set(CORE_PLATFORM_NAME ios)
  endif()
  if(NOT APP_RENDER_SYSTEM)
    set(APP_RENDER_SYSTEM gles)
  endif()
endif()

if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
  set(CMAKE_OSX_SYSROOT /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk)
  set(CMAKE_LIBRARY_PATH ${CMAKE_FIND_ROOT_PATH}/lib:/Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk/lib:/usr/X11R6/lib)
  set(CMAKE_INCLUDE_PATH ${CMAKE_FIND_ROOT_PATH}/include:/Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk/include:/usr/X11R6/include)
  list(APPEND CMAKE_FIND_ROOT_PATH ${CMAKE_OSX_SYSROOT} ${CMAKE_OSX_SYSROOT}/usr /usr/X11R6)
endif()
set(CMAKE_SYSTEM_VERSION 1)

# specify the cross compiler
set(CMAKE_C_COMPILER /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang)
set(CMAKE_CXX_COMPILER /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++)
set(CMAKE_AR /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar CACHE FILEPATH "Archiver")
set(CMAKE_LINKER /Users/redd/Library/Python/3.9/bin/pip3 CACHE FILEPATH "Linker")
set(CMAKE_NM /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/nm CACHE FILEPATH "Nm")
set(CMAKE_OBJDUMP /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/objdump CACHE FILEPATH "Objdump")
set(CMAKE_RANLIB /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib CACHE FILEPATH "Ranlib")

if(NOT "no" STREQUAL "")
  set(CMAKE_CXX_COMPILER_LAUNCHER )
  set(CMAKE_C_COMPILER_LAUNCHER )
endif()

# where is the target environment
if(NOT "/Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin" STREQUAL "")
  if("macosx" STREQUAL "webos")
    list(APPEND CMAKE_FIND_ROOT_PATH /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/x86_64-darwin/sysroot)
  else()
    list(APPEND CMAKE_FIND_ROOT_PATH /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sysroot/usr)
  endif()
endif()

# add Android directories and tools
if(CORE_SYSTEM_NAME STREQUAL android)
  set(NDKROOT )
  set(SDKROOT /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk)
  set(TOOLCHAIN /Applications/Utilities/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin)
  set(HOST x86_64-darwin)
  list(APPEND CMAKE_LIBRARY_PATH ${TOOLCHAIN}/sysroot/usr/lib/${HOST}/21)
  string(REPLACE ":" ";" SDK_BUILDTOOLS_PATH "")
endif()

set(CMAKE_C_FLAGS "-fheinous-gnu-extensions -DNDEBUG=1   -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_CXX_FLAGS "-stdlib=libc++ -DNDEBUG=1   -std=c++17 -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_C_FLAGS_RELEASE "-fheinous-gnu-extensions -DNDEBUG=1   -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_CXX_FLAGS_RELEASE "-stdlib=libc++ -DNDEBUG=1   -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_C_FLAGS_DEBUG "-fheinous-gnu-extensions -g -D_DEBUG  -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_CXX_FLAGS_DEBUG "-stdlib=libc++ -g -D_DEBUG  -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_CPP_FLAGS "-fheinous-gnu-extensions -DNDEBUG=1   -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk")
set(CMAKE_EXE_LINKER_FLAGS "-Wl,-search_paths_first -arch x86_64 -mmacosx-version-min=10.14 -isysroot /Applications/Utilities/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk -stdlib=libc++  -liconv ")
set(ENV{CFLAGS} ${CMAKE_C_FLAGS})
set(ENV{CXXFLAGS} ${CMAKE_CXX_FLAGS})
set(ENV{CPPFLAGS} ${CMAKE_CPP_FLAGS})
set(ENV{LDFLAGS} ${CMAKE_EXE_LINKER_FLAGS})
# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_FRAMEWORK LAST)

# Binary Addons
if(NOT CORE_SYSTEM_NAME STREQUAL linux)
  set(ADDONS_PREFER_STATIC_LIBS ON)
endif()

set(KODI_DEPENDSBUILD 1)

